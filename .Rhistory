coord_polar()
# Gráfico-3
millas %>%  filter(traccion == "4" & anio == 2008 & combustible == "p") %>% ggplot() +
aes(x = fabricante, fill = clase) +
geom_bar() +
coord_polar(theta = "y")
# Gráfico-4
millas %>%  filter(traccion == "4" & anio == 2008 & combustible == "p") %>% ggplot() +
aes(x = fabricante, fill = clase) + geom_bar() +
labs(title = "Distribución de clase de automóviles
por fabricante en 2008",                                   # Le agregamos un título adecuado
x = "Fabricante del auto",                                 # Cambiamos el nombre del eje `x`
y = "Número de autos",                                     # Cambiamos el nombre del eje `y`
fill = "Tipo de auto",                                     # Cambiamos el nombre de la leyenda
subtitle = "Estos autos solo tienen tracción en las
cuatro ruedas y combustible premium",                      # le agremos un subtítulo
caption = "fuente: http://fueleconomy.gov")                # le agregamos la fuente de donde se han proporcionado los datos
francia <- map_data("france") %>% ggplot() + aes(x = long, y = lat, group = group) +
geom_polygon(fill = "orange", color = "black")
# Plot it in cartesian coordinates
francia
francia <- map_data("france") %>% ggplot() + aes(x = long, y = lat, group = group) +
geom_polygon(fill = "#66ffff", color = "black")
# Plot it in cartesian coordinates
francia
# Con la correcta proyección de Mercator.
francia + coord_map(
projection = "mercator",
...,
parameters = NULL,
orientation = NULL,
xlim = NULL,
ylim = NULL,
clip = "on")
# Con la correcta proyección de Mercator.
francia + coord_map(
projection = "mercator",
parameters = NULL,
orientation = NULL,
xlim = NULL,
ylim = NULL,
clip = "on")
# Con la correcta proyección de Mercator.
francia + coord_map("orthographic")
# Con la correcta proyección de Mercator.
francia + coord_map("orthographic",
projection = "mercator")
# Con la correcta proyección de Mercator.
francia + coord_map(
projection = "mercator")
# Con la correcta proyección de Mercator.
francia + coord_map(
projection = "orthographic")
?mapproj::mapproject
?mapproj::mapproject %>% view()
?mapproj::mapproject
ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = 1)
mundo <- ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = 1)
mundo
library(tictoc)
### 3. ¿Cuál es la diferencia entre `coord_quickmap()` y `coord_map()`?
tic()
mundo <- ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = 1)
mundo
toc()
mundo + coord_map()
toc()
tic()
mundo + coord_map()
toc()
tic()
mundo + coord_quickmap()
toc()
# `coord_quickmap()` usa una aproximación más rápida que ignora la curvatura de la tierra y
#  ajusta de acuerdo a la razón de latitud y longitud.
# With the aspect ratio approximation
tic()
francia + coord_quickmap()
toc()
# Con la correcta proyección de Mercator.
tic()
francia + coord_map()
toc()
tic()
mundo
toc()
tic()
mundo + coord_map()
toc()
tic()
mundo + coord_quickmap()
toc()
mundo + coord_map()
View(mundo)
ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = 1)
ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
### 3. ¿Cuál es la diferencia entre `coord_quickmap()` y `coord_map()`?
tic()
mundo <- ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
toc()
tic()
mundo
toc()
tic()
mundo + coord_map()
toc()
tic()
mundo + coord_quickmap()
toc()
library(mapproj)
p_load(ggplot2, dplyr, datos, maps, tictoc, mapproj)
tic()
ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
toc()
tic()
mundo
toc()
tic()
mundo + coord_map()
toc()
tic()
mundo + coord_quickmap()
toc()
tic()
ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
toc()
tic()
ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_map()
toc()
tic()
ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
toc()
# Vamos a usar la proyección `Van der grinten`
mundo + coord_map("vandergrinten")
mundo <- ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = 1)
# Vamos a usar la proyección `Van der grinten`
mundo + coord_map("vandergrinten")
?mapproj::mapproject
# Vamos a usar la proyección `Van der grinten`
mundo + coord_map("sinusoidal")
mundo <- ggplot(map_data("world"),
aes(lat, long, group = group)) +
geom_polygon(fill = "white", color = 1)
mundo + coord_map()
ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = 1)
mundo <- ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = 1)
mundo + coord_map()
mundo + coord_map(xlim = c(-180, 180))
tic()
mundo + coord_map(xlim = c(-180, 180))
toc()
tic()
mundo + coord_quickmap()
toc()
# A continuación usaremos direfentes tipos de proyección
# Vamos a usar la proyección `Van der grinten`
mundo + coord_map("sinusoidal")
# A continuación usaremos direfentes tipos de proyección
# Vamos a usar la proyección `Van der grinten`
mundo + coord_map(xlim = c(-180, 180), projection = "sinusoidal")
# A continuación usaremos direfentes tipos de proyección
# Vamos a usar la proyección `Van der grinten`
mundo + coord_map(xlim = c(-180, 180), projection = "vendergrinten")
# A continuación usaremos direfentes tipos de proyección
# Vamos a usar la proyección `Van der grinten`
mundo + coord_map(xlim = c(-180, 180), projection = "vandergrinten")
# A continuación usaremos direfentes tipos de proyección
# Vamos a usar la proyección `Van der grinten`
mundo + coord_map(xlim = c(-180, 180), projection = "vandergrinten")
mundo + coord_map(xlim = c(-180, 180),
projection = "orthographic")
mundo + coord_map(projection = "orthographic")
# Poryección Ojo de pez
mundo + coord_map(projection = "fisheye")
# Poryección Ojo de pez
mundo + coord_map(projection = "fisheye"
n = 4)
# Poryección Ojo de pez
mundo + coord_map(projection = "fisheye",
n = 4)
# Proyección Sinusoidal
mundo + coord_map(projection = "sinusoidal")
# Proyección Sinusoidal
mundo + coord_map(projection = "sinusoidal",
xlim = c(-180, 180))
mundo + coord_quickmap("vandergrinten")
italia <- map_data("italy") %>% ggplot() + aes(x = long, y = lat, group = group) +
geom_polygon(fill = "#66ffff", color = "black")
# Plot it in cartesian coordinates
italia
italia + coord_map()
italia + coord_quickmap()
italia + coord_map()
# Con la correcta proyección de Mercator.
tic()
italia + coord_map()
toc()
# `coord_quickmap()` usa una aproximación más rápida que ignora la curvatura de la tierra y
#  ajusta de acuerdo a la razón de latitud y longitud.
# With the aspect ratio approximation
tic()
italia + coord_quickmap()
toc()
# podemos ver los diferentes tipos de proyecciones desde el siguiente código
?mapproj::mapproject
# Proyección Cilíndrica
mundo + coord_map(projection = "cylindrical")
# Proyección Cilíndrica
mundo + coord_map(projection = "cylindrical",
xlim = c(-180, 180))
# Poryección Ortográfica
mundo + coord_map(projection = "gall")
# Poryección Ortográfica
mundo + coord_map(projection = "gall",
parameters = c(0, 45)))
# Poryección Ortográfica
mundo + coord_map(projection = "gall",
parameters = c(0, 45))
# Poryección Ortográfica
mundo + coord_map(projection = "gall",
parameters = lat0)
# podemos ver los diferentes tipos de proyecciones desde el siguiente código
?mapproj::mapproject
# Poryección Ortográfica
mundo + coord_map(projection = "gall",
parameters = NULL)
# Poryección Ortográfica
mundo + coord_map(projection = "gall",
parameters = 45)
# Poryección Ortográfica
mundo + coord_map(projection = "gall",
parameters = 180)
# Poryección Ortográfica
mundo + coord_map(projection = "gall",
parameters = 0)
# Poryección Ortográfica
mundo + coord_map(projection = "gall",
parameters = 0,
xlim = c(-180, 180))
# Proyección Van der grinten
mundo + coord_map(projection = "vandergrinten",
xlim = c(-180, 180))
mundo + coord_map(xlim = c(-180, 180))  # Hemos modificado los límites del eje X debido a que la función produce
# Poryección Gall
mundo + coord_map(projection = "gall",
parameters = 45,
xlim = c(-180, 180))
# Poryección Gall-Peters
mundo + coord_map(projection = "gall",
parameters = 45) #,
# Poryección Gall-Peters
mundo + coord_map(projection = "gall",
parameters = 45,
xlim = c(-180, 180))
# Plot it in cartesian coordinates
italia
italia + coord_quickmap()
italia + coord_quickmap(expand = F)
italia + coord_quickmap(expand = F)
italia + coord_quickmap(expand = T)
italia + coord_quickmap()
italia + coord_quickmap(expand = T) #
italia + coord_quickmap(expand = F) #
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point()
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point() + scale_y_continuous(breaks = seq(0, 50, 5))
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point() +
scale_y_continuous(breaks = seq(0, 50, 5))
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point() +
scale_y_continuous(breaks = seq(0, 50, 5)) +
geom_abline()
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point() +
geom_abline()
ciudad_autopista <- ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point()
ciudad_autopista
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point()
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point() +
geom_abline() +
coord_fixed()
View(millas)
### 4. ¿Qué te dice la gráfica siguiente sobre la relación entre la ciudad y la `autopista`?
library(plotly)
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point()
ggplotly()
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point() +
geom_abline()
ggplotly()
# Podemos usar el paquete `plotly` para tener un gráfico mas interactivo.
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point() +
geom_abline() +
coord_fixed()
ggplotly()
View(millas)
# Podemos usar el paquete `plotly` para tener un gráfico mas interactivo.
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista, fill = clase)) +
geom_point() +
geom_abline() +
coord_fixed()
# Podemos usar el paquete `plotly` para tener un gráfico mas interactivo.
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista, fill = fabricante)) +
geom_point() +
geom_abline() +
coord_fixed()
ggplotly()
# Podemos usar el paquete `plotly` para tener un gráfico mas interactivo.
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista, fill = fabricante, color = fabricante)) +
geom_point() +
geom_abline() +
coord_fixed()
ggplotly()
# Podemos usar el paquete `plotly` para tener un gráfico mas interactivo.
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista, color = fabricante)) +
geom_point() +
geom_abline() +
coord_fixed()
ggplotly()
# Podemos usar el paquete `plotly` para tener un gráfico mas interactivo.
ggplot(data = millas, mapping = aes(x = ciudad,
y = autopista,
color = fabricante,
fill = clase)) +   #
geom_point() +
geom_abline() +
coord_fixed()
ggplotly()
# Podemos usar el paquete `plotly` para tener un gráfico mas interactivo.
ggplot(data = millas, mapping = aes(x = ciudad,
y = autopista,
color = fabricante,
fill = clase)) +   #
geom_point(show.legend = F) +
geom_abline() +
coord_fixed()
ggplotly()
# Podemos usar el paquete `plotly` para tener un gráfico mas interactivo.
ggplot(data = millas, mapping = aes(x = ciudad,
y = autopista,
color = fabricante, # Para saber el fabricante del auto
fill = clase)) +    # Para poder saber de que clase es el auto
geom_point() +
geom_abline() +
coord_fixed()
ggplotly()
rm(list = ls())
cat("\014")
graphics.off()
options(scipen = 999)
cat("\014")
library(pacman)
p_load(ggplot2, dplyr, datos, maps, tictoc, mapproj, plotly)
# Vamos a almacenar los datos de las en un onjeto llamado `millas` para usarlo en los ejemplos
millas <- datos::millas
millas
# Gráfico-1
millas %>%  filter(traccion == "4" & anio == 2008 & combustible == "p") %>% ggplot() +
aes(x = fabricante, fill = clase) + geom_bar()
# Grafico-2
millas %>%  filter(traccion == "4" & anio == 2008 & combustible == "p") %>% ggplot() +
aes(x = fabricante, fill = clase) +
geom_bar() +
coord_polar()
# Gráfico-3
millas %>%  filter(traccion == "4" & anio == 2008 & combustible == "p") %>% ggplot() +
aes(x = fabricante, fill = clase) +
geom_bar() +
coord_polar(theta = "y")
# Gráfico-4
millas %>%  filter(traccion == "4" & anio == 2008 & combustible == "p") %>% ggplot() +
aes(x = fabricante, fill = clase) + geom_bar() +
labs(title = "Distribución de clase de automóviles
por fabricante en 2008",                                   # Le agregamos un título adecuado
x = "Fabricante del auto",                                 # Cambiamos el nombre del eje `x`
y = "Número de autos",                                     # Cambiamos el nombre del eje `y`
fill = "Tipo de auto",                                     # Cambiamos el nombre de la leyenda
subtitle = "Estos autos solo tienen tracción en las
cuatro ruedas y combustible premium",                      # le agremos un subtítulo
caption = "fuente: http://fueleconomy.gov")                # le agregamos la fuente de donde se han proporcionado los datos
# por defecto la proyección que usa es `Mercator`
mundo <- ggplot(map_data("world"),
aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = 1)
mundo
tic()
mundo + coord_map(xlim = c(-180, 180))  # Hemos modificado los límites del eje X debido a que la función produce
toc()                                   # unas líneas horizontales no deseadas
tic()
mundo + coord_quickmap()
toc()
# Proyección Van der grinten
mundo + coord_map(projection = "vandergrinten",
xlim = c(-180, 180))
# Poryección Ortográfica
mundo + coord_map(projection = "orthographic")
# Proyección Ojo de pez
mundo + coord_map(projection = "fisheye",
n = 4)   # Índice de refracción
# Proyección Sinusoidal
mundo + coord_map(projection = "sinusoidal",
xlim = c(-180, 180))
# Proyección Cilíndrica
mundo + coord_map(projection = "cylindrical",
xlim = c(-180, 180))
# Poryección Gall-Peters
mundo + coord_map(projection = "gall",
parameters = 45,
xlim = c(-180, 180))
# podemos ver los diferentes tipos de proyecciones que hay desde el siguiente código
?mapproj::mapproject
# Usaremos el mapa de Italia para dar un ejemplo con la funcion `coord_quickmap`
italia <- map_data("italy") %>% ggplot() + aes(x = long, y = lat, group = group) +
geom_polygon(fill = "#66ffff", color = "black")
italia
# Usaremos el mapa de Italia para dar un ejemplo con la funcion `coord_quickmap`
italia <- map_data("italy") %>% ggplot() + aes(x = long, y = lat, group = group) +
geom_polygon(fill = "white", color = "black")
italia
italia + coord_quickmap(expand = TRUE) # Si es FALSO, los límites se toman exactamente de los datos o de xlim/ylim.
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point()
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point() +
geom_abline()
ggplot(data = millas, mapping = aes(x = ciudad, y = autopista)) +
geom_point() +
geom_abline() +
coord_fixed()
# Podemos usar el paquete `plotly` para tener un gráfico mas interactivo.
ggplot(data = millas, mapping = aes(x = ciudad,
y = autopista,
color = fabricante, # Para saber el fabricante del auto
fill = clase)) +    # Para poder saber de que clase es el auto
geom_point() +
geom_abline() +
coord_fixed()
ggplotly()
# Podemos usar el paquete `plotly` para tener un gráfico mas interactivo.
ggplot(data = millas, mapping = aes(x = ciudad,
y = autopista,
color = fabricante, # Para saber el fabricante del auto
fill = anio)) +    # Para poder saber de que clase es el auto
geom_point() +
geom_abline() +
coord_fixed()
ggplotly()
# Podemos usar el paquete `plotly` para tener un gráfico mas interactivo.
ggplot(data = millas, mapping = aes(x = ciudad,
y = autopista,
color = fabricante, # Para saber el fabricante del auto
fill = clase)) +    # Para poder saber de que clase es el auto
geom_point() +
geom_abline() +
coord_fixed()
ggplotly()
# Podemos usar el paquete `plotly` para tener un gráfico mas interactivo.
ggplot(data = millas, mapping = aes(x = ciudad,
y = autopista,
color = fabricante, # Para saber el fabricante del auto
fill = clase)) +    # Para poder saber de que clase es el auto
geom_point() +
geom_abline() +
coord_fixed()
geom_point() +
geom_abline() +
coord_fixed()
# Podemos usar el paquete `plotly` para tener un gráfico mas interactivo.
ggplot(data = millas, mapping = aes(x = ciudad,
y = autopista,
color = fabricante)) + # Para saber el fabricante del auto
geom_point() +
geom_abline() +
coord_fixed()
ggplotly()
rm(list = ls())
cat("\014")
graphics.off()
options(scipen = 999)
